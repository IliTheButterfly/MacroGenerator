

# Define global variables
PLC_NAME = "Rockwell EtherNet/IP (CompactLogix)"
HMI_NAME = "Local HMI"

# Define tank names and commands
tanks = [
    'C21',
    'C22',
    'C23',
    'C24',
    'C25',
    'C26',
    'F31',
    'F32',
    'F33',
    'F34',
    'F35',
]

tank_commands = ["Lock", "Pause", "Stop", "Zero", "QtyF.Play"]
hopper_commands = ["Lock", "Pause", "Stop", "Zero"]
hopper_qty_commands = {
    "Hopper1" : "QtyF",
    "Hopper2" : "QtyW1",
    "Hopper3" : "QtyW2",
    "Hopper4" : "QtyW3",
    "Hopper5" : "QtyW4",
                        
}
values = ["Sel", "Cmd", "Per"]
read_values = ["Sel", "Per"]
write_values = ["Cmd"]

# Define float values and their corresponding PLC tags
float_values = {
    "Req": "Dem",
    "Actual": "Act",
    "Total": "ActT",
    "Remaining": "Rest",
}

read_float_values = [
    "Actual",
    "Total",
    "Remaining",
]

write_float_values = [
    "Req",
]

header = """// GENERATED CODE
// This code was generated by a script.\n\n"""


def strip_dot(name:str) -> str:
    if '.' in name:
        return name.split('.')[-1]
    return name

# Generate LoadValues Script
def generate_load_tank_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variables for data from PLC\n"
    script += "    bool plcVal\n"
    script += "    bool tankSelected\n"
    script += "    float plcFloat\n\n"
    
    for tank in tanks:
        script += f"    // {tank} Tank\n"
        script += f"    GetData(tankSelected, \"{HMI_NAME}\", \"{tank}\", 1)\n"
        script += f"    if tankSelected then\n"
        for command in tank_commands:
            for value in values:
                plc_tag = f"{tank}.{command}.{value}"
                hmi_tag = f"Tank{strip_dot(command)}{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            script += "\n"
        # Add float values for each tank
        for hmi_part, plc_suffix in float_values.items():
            plc_tag = f"{tank}.QtyF.{plc_suffix}"
            hmi_tag = f"Tank{hmi_part}"
            script += f"        GetData(plcFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
            script += f"        SetData(plcFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += "        return\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

# Generate UpdateOnPer Script
def generate_update_tank_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variables for PLC values\n"
    script += "    bool plcVal\n"
    script += "    float plcFloat\n"
    script += "    bool tankSelected\n\n"
    
    for tank in tanks:
        script += f"    // {tank} Tank\n"
        script += f"    GetData(tankSelected, \"{HMI_NAME}\", \"{tank}\", 1)\n"
        script += f"    if tankSelected then\n"
        for command in tank_commands:
            for value in read_values:
                plc_tag = f"{tank}.{command}.{value}"
                hmi_tag = f"Tank{strip_dot(command)}{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            script += "\n"
        # Read float values
        for hmi_part, plc_suffix in float_values.items():
            if hmi_part not in read_float_values:
                continue
            plc_tag = f"{tank}.QtyF.{plc_suffix}"
            hmi_tag = f"Tank{hmi_part}"
            script += f"        GetData(plcFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
            script += f"        SetData(plcFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += "        return\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

# Generate WriteCmd Script
def generate_write_tank_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variables\n"
    script += "    float hmiFloat\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    bool hmiVal, tankSelected\n\n"
    
    for tank in tanks:
        script += f"    // {tank} Tank\n"
        script += f"    GetData(tankSelected, \"{HMI_NAME}\", \"{tank}\", 1)\n"
        script +=  "    if tankSelected then\n"
        for command in tank_commands:
            for value in write_values:
                plc_tag = f"{tank}.{command}.{value}"
                hmi_tag = f"Tank{strip_dot(command)}{value}"
                script += f"        GetData(hmiVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"        if hmiVal then\n"
                script += f"            SetData(t, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"            SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"            return\n"
                script += f"        end if\n\n"
            
        for hmi_part, plc_part in float_values.items():
            if hmi_part not in write_float_values:
                continue
            plc_tag = f"{tank}.QtyF.{plc_part}"
            hmi_tag = f"Tank{hmi_part}"
            script += f"        GetData(hmiFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            script += f"        SetData(hmiFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                
        script += f"        return\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

# Define hopper names and commands
hoppers = ["H41", "H42", "H43", "H44"]
hopper_feed_counts = {
    'H41' : 3,
    'H42' : 4,
    'H43' : 2,
    'H44' : 1,
}

# Generate LoadHopperValues Script
def generate_load_hopper_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variables for data from PLC\n"
    script += "    bool plcVal\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    bool hopperSelected\n"
    script += "    float plcFloat\n\n"
    
    
    for i in range(3, 6):
        hmi_tag = f"Hopper{i}PlayPer"
        script += f"    SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
    
    for hopper in hoppers:
        script += f"    // {hopper} Hopper\n"
        script += f"    GetData(hopperSelected, \"{HMI_NAME}\", \"{hopper}\", 1)\n"
        script += f"    if hopperSelected then\n"
        
        # Read commands (Lock, Pause, Stop, Zero)
        for command in hopper_commands:
            for value in values:
                plc_tag = f"{hopper}.{command}.{value}"
                hmi_tag = f"Hopper{command}{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"

        # Read Qty values
        i = 0
        for hmi_part, plc_part in hopper_qty_commands.items():
            if i > hopper_feed_counts[hopper]:
                break
            i += 1
            for value in values:
                plc_tag = f"{hopper}.{plc_part}.Play.{value}"
                hmi_tag = f"{hmi_part}Play{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"

            for hmi_part2, plc_part2 in float_values.items():
                plc_tag = f"{hopper}.{plc_part}.{plc_part2}"
                hmi_tag = f"{hmi_part}{hmi_part2}"
                script += f"        GetData(plcFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        
        for ii in range(3, 6):
            hmi_tag = f"Hopper{ii}Present"
            if ii - 1 > (hopper_feed_counts[hopper]):
                script += f"        SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            else:
                script += f"        SetData(t, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                

        script += "        return\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

# Generate UpdateHopperOnPer Script
def generate_update_hopper_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variables for PLC values\n"
    script += "    bool plcVal\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    float plcFloat\n"
    script += "    bool hopperSelected\n\n"
    
    for hopper in hoppers:
        script += f"    // {hopper} Hopper\n"
        script += f"    GetData(hopperSelected, \"{HMI_NAME}\", \"{hopper}\", 1)\n"
        script += f"    if hopperSelected then\n"
        
        # Update commands (Lock, Pause, Stop, Zero)
        for command in hopper_commands:
            for value in read_values:
                plc_tag = f"{hopper}.{command}.{value}"
                hmi_tag = f"Hopper{strip_dot(command)}{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"

        # Update Qty values
        i = 0
        for hmi_part, plc_part in hopper_qty_commands.items():
            if i > hopper_feed_counts[hopper]:
                break
            i += 1
            for value in read_values:
                plc_tag = f"{hopper}.{plc_part}.Play.{value}"
                hmi_tag = f"{hmi_part}Play{value}"
                script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"

            for hmi_part2, plc_part2 in float_values.items():
                if hmi_part2 not in read_float_values:
                    continue
                plc_tag = f"{hopper}.{plc_part}.{plc_part2}"
                hmi_tag = f"{hmi_part}{hmi_part2}"
                script += f"        GetData(plcFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"        SetData(plcFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            
        for ii in range(3, 6):
            hmi_tag = f"Hopper{ii}Present"
            if ii - 1 > (hopper_feed_counts[hopper]):
                script += f"        SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            else:
                script += f"        SetData(t, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

# Generate WriteHopperReq Script
def generate_write_hopper_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variable\n"
    script += "    bool hmiVal\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    float hmiFloat\n"
    script += "    bool hopperSelected\n\n"
    
    
    for hopper in hoppers:
        script += f"    // {hopper} Hopper\n"
        script += f"    GetData(hopperSelected, \"{HMI_NAME}\", \"{hopper}\", 1)\n"
        script += f"    if hopperSelected then\n"
        
        # Write commands (Lock, Pause, Stop, Zero)
        for command in hopper_commands:
            for value in write_values:
                plc_tag = f"{hopper}.{command}.{value}"
                hmi_tag = f"Hopper{strip_dot(command)}{value}"
                script += f"        GetData(hmiVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"        if hmiVal then\n"
                script += f"            SetData(t, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"            SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"            return\n"
                script += f"        end if\n\n"
                
        # Write Qty values
        i = 0
        for hmi_part, plc_part in hopper_qty_commands.items():
            if i > hopper_feed_counts[hopper]:
                break
            i += 1
            for value in write_values:
                plc_tag = f"{hopper}.{plc_part}.Play.{value}"
                hmi_tag = f"{hmi_part}Play{value}"
                script += f"        GetData(hmiVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"        if hmiVal then\n"
                script += f"            SetData(t, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
                script += f"            SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"            return\n"
                script += f"        end if\n\n"
                
            for hmi_part2, plc_part2 in float_values.items():
                if hmi_part2 not in write_float_values:
                    continue
                plc_tag = f"{hopper}.{plc_part}.{plc_part2}"
                hmi_tag = f"{hmi_part}{hmi_part2}"
                script += f"        GetData(hmiFloat, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
                script += f"        SetData(hmiFloat, \"{PLC_NAME}\", \"{plc_tag}\", 1)\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    script += "end macro_command\n"
    print(script)

valves = [
    'V80100',
    'V80121',
    'V80122',
    'V80123',
    'V80124',
    'V80125',
    'V80126',
    'V80112',
    'V80111',
    'V80131',
    'V80132',
    'V80133',
    'V80134',
    'V80135',
    'V80401',
    'V80150',
    
    'V80141',
    'V40141',
    'V40241',
    'V43041',
    
    'V80142',
    'V41042',
    'V41242',
    'V41342',
    'V42142',

    'V80143',
    'V40443',
    'V41143',
    
    'V80144',
    'V40344',
]

valve_read_values = {
    'ValveLock' : 'HMI.18',
    'ValveAuto' : 'HMI.16',
    'ValveOpen' : 'HMI.19',
    'ValveClose' : 'HMI.20',
}

valve_write_values = {
    'ValveWriteLock' : 'HMI.2',
    'ValveWriteAuto' : 'HMI.0',
    'ValveWriteOpen' : 'HMI.3',
    'ValveWriteClose' : 'HMI.4',
}

def load_valve_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variable\n"
    script += "    bool plcVal\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    bool valveSelected\n\n"
    
    for valve in valves:
        script += f"    // {valve} Valve\n"
        script += f"    GetData(valveSelected, \"{HMI_NAME}\", \"{valve}\", 1)\n"
        script += f"    if valveSelected then\n"
        for hmi_tag, plc_suffix in valve_read_values.items():
            script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{valve}.{plc_suffix}\", 1)\n"
            script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        for hmi_tag, plc_suffix in valve_write_values.items():
            script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{valve}.{plc_suffix}\", 1)\n"
            script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += "        return\n"
        script += "    end if\n\n"
        print(script)
        script = ''
    
    script += "end macro_command\n"
    print(script)
    
def read_valve_values():
    print(header)
    script =  f"macro_command main()\n"
    script += f"    // Declare variable\n"
    script += f"    bool plcVal\n"
    script += f"    bool f = false\n"
    script += f"    bool t = true\n"
    script += f"    bool valveSelected\n\n"
    
    for valve in valves:
        script += f"    // {valve} Valve\n"
        script += f"    GetData(valveSelected, \"{HMI_NAME}\", \"{valve}\", 1)\n"
        script += f"    if valveSelected then\n"
        for hmi_tag, plc_suffix in valve_read_values.items():
            script += f"        GetData(plcVal, \"{PLC_NAME}\", \"{valve}.{plc_suffix}\", 1)\n"
            script += f"        SetData(plcVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += f"        return\n"
        script += f"    end if\n\n"
        print(script)
        script = ''
    
    script += "end macro_command\n"
    print(script)

def send_valve_values():
    print(header)
    script = "macro_command main()\n"
    script += "    // Declare variable\n"
    script += "    bool hmiVal\n"
    script += "    bool f = false\n"
    script += "    bool t = true\n"
    script += "    bool valveSelected\n\n"
    
    for valve in valves:
        script += f"    // {valve} Valve\n"
        script += f"    GetData(valveSelected, \"{HMI_NAME}\", \"{valve}\", 1)\n"
        script += f"    if valveSelected then\n"
        for hmi_tag, plc_suffix in valve_write_values.items():
            script += f"        GetData(hmiVal, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
            script += f"        SetData(hmiVal, \"{PLC_NAME}\", \"{valve}.{plc_suffix}\", 1)\n"
            script += f"        SetData(f, \"{HMI_NAME}\", \"{hmi_tag}\", 1)\n"
        script += f"        return\n"
        script += f"    end if\n\n"
        print(script)
        script = ''
    
    script += "end macro_command\n"
    print(script)


def reset_values(vars:list):
    print(header)
    script = "macro_command main()\n"
    script += "    // Reset all selection values\n"
    script += "    bool f = false\n\n"
    for v in vars:
        script += f"    SetData(f, \"{HMI_NAME}\", \"{v}\", 1)\n"
        
    script += "\nend macro_command\n\n"
    print(script)

    
if __name__ == "__main__":
    # Output the scripts
    print()
    print()
    # generate_load_tank_values()
    # generate_update_tank_values()
    # generate_write_tank_values()
    # reset_values(tanks)

    # Output the new scripts for hoppers
    generate_load_hopper_values()
    # generate_update_hopper_values()
    # generate_write_hopper_values()
    # reset_values(hoppers)


    # load_valve_values()
    # reset_values(valves)
